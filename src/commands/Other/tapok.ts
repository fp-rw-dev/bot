import {
  SlashCommandBuilder,
  SlashCommandSubcommandBuilder,
  SlashCommandUserOption,
} from "@discordjs/builders";
import {
  ApplicationCommandRegistry,
  Command,
  PieceContext,
  RegisterBehavior,
} from "@sapphire/framework";
import { CommandInteraction, Util } from "discord.js";

export class TapokCommand extends Command {
  public constructor(context: PieceContext, options: Command.Options) {
    super(context, {
      ...options,
      name: "—Ç–∞–ø–æ–∫",
      description: "RPG –ø—Ä–æ —Ç–∞–ø–∫–∏",
      // preconditions:["O"]
    });
  }

  public async chatInputRun(interaction: CommandInteraction): Promise<void> {
    const names: Record<string, string> = {
      Houl: "–•–æ—É–ª",
      Lynx: "–õ–∏–Ω–∫—Å",
      ovinu: "–û–≤–∏–Ω—É",
    };

    function formatUsername(username: string, checkMap = true) {
      return Util.escapeMarkdown(
        checkMap ? names[username] ?? username : username
      ).replaceAll("@", "@\u200b");
    }

    switch (interaction.options.getSubcommand(true)) {
      case "–∫–∏–Ω—É—Ç—å": {
        const lastTapok =
          this.container.tapkiTimestamps.get(
            `${interaction.user.id}.lastTapok`
          ) || 0;
        if (Date.now() - lastTapok < 1 * 60 * 1000) {
          await interaction.reply(
            `> üïí  –ü–æ–¥–æ–∂–¥–∏ ${Math.round(
              60 - (Date.now() - lastTapok) / 1000
            )} —Å–µ–∫—É–Ω–¥(—É) –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∫–∏–Ω—É—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ç–∞–ø–æ–∫`
          );
          return;
        }
        this.container.tapkiTimestamps.set(
          `${interaction.user.id}.lastTapok`,
          Date.now()
        );
        const user = interaction.options.getUser("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", true);
        const hpDealt =
          Math.random() > 0.3 ? Math.round((Math.random() + 0.4) * 60) : 0;
        const agressor = await this.container.tapkiManager.getUser(
          interaction.user.id
        );
        const target = await this.container.tapkiManager.getUser(user.id);
        if (Date.now() - (agressor?.inHospitalFrom ?? 0) < 2 * 60 * 60 * 1000) {
          await interaction.reply(
            `> üöë  –í—ã —Å–µ–π—á–∞—Å –≤ –±–æ–ª—å–Ω–∏—Ü–µ, –æ—Ç—Ç—É–¥–∞ —Ç–∞–ø–æ–∫ –Ω–µ –¥–æ–ª–µ—Ç–∏—Ç!`
          );
          return;
        }
        if ((agressor?.tapki || 1) < 1) {
          await interaction.reply(
            `> üíÄ  –£ —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–∞–ø–∫–æ–≤, —á—Ç–æ–±—ã –∫–∏–¥–∞—Ç—å`
          );
          return;
        }
        if (Date.now() - (target?.inHospitalFrom ?? 0) < 2 * 60 * 60 * 1000) {
          await interaction.reply(
            `> üöë  ${formatUsername(user.username)} —Å–µ–π—á–∞—Å –≤ –±–æ–ª—å–Ω–∏—Ü–µ (–∏–≥—Ä–æ–≤–æ–π)`
          );
          return;
        }
        if (target) {
          await this.container.tapkiManager.setHealth(
            user.id,
            target.hp - hpDealt < 0 ? 0 : target.hp - hpDealt
          );
        }
        if (target && target.hp <= 0) {
          await this.container.tapkiManager.toHospital(user.id);
          await this.container.tapkiManager.setHealth(user.id, 1000);
        }
        if (target)
          await this.container.tapkiManager.decrTapki(interaction.user.id, 1);
        this.container.logger.debug(
          target,
          (target?.hp || 1000) <= 0,
          target?.hp
        );
        await interaction.reply(
          hpDealt
            ? `> üí•  **${formatUsername(
                interaction.user.username
              )}** –ø–æ–ø–∞–ª —Ç–∞–ø–∫–æ–º –≤ ${user}${
                target
                  ? ` –∏ —Å–Ω—ë—Å ${hpDealt} HP. –£ **${formatUsername(
                      user.username,
                      false
                    )}** –æ—Å—Ç–∞–ª–æ—Å—å ${target.hp - hpDealt}/1000 HP`
                  : ""
              }${target && target.hp <= 0 ? ", –∏ –æ–Ω –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –±–æ–ª—å–Ω–∏—Ü—É" : ""}.`
            : `> üö©  **${formatUsername(
                interaction.user.username
              )}** –∫–∏–Ω—É–ª —Ç–∞–ø–∫–æ–º –≤ **${formatUsername(
                user.username,
                false
              )}**, –Ω–æ –Ω–µ –ø–æ–ø–∞–ª.`
        );
        break;
      }

      case "–ø—Ä–æ—Ñ–∏–ª—å": {
        const user =
          interaction.options.getUser("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") || interaction.user;
        const gameUser = await this.container.tapkiManager.getUser(user.id);
        if (!gameUser) {
          await interaction.reply(
            `> ‚õî  –£ ${formatUsername(
              user.username,
              false
            )} –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Tapki RPG`
          );
          return;
        }
        await interaction.reply(
          `> üëÅÔ∏è  **${formatUsername(user.username, false)}** ‚Äî ${
            gameUser.hp
          } HP, ${gameUser.tapki} ${
            gameUser.tapki % 10 === 1 ? "—Ç–∞–ø–æ–∫" : "—Ç–∞–ø–∫–æ–≤"
          } –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ${
            Date.now() - (gameUser?.inHospitalFrom ?? 0) < 2 * 60 * 60 * 1000
              ? ", –≤ –±–æ–ª—å–Ω–∏—Ü–µ"
              : ""
          }`
        );
        break;
      }

      case "–≤—ã–π—Ç–∏": {
        this.container.tapkiTimestamps.set(
          `${interaction.user.id}.deletedAccount`,
          Date.now()
        );
        const { count } = await this.container.tapkiManager.deleteUser(
          interaction.user.id
        );
        await interaction.reply(
          `> üí•  –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω${count ? "" : " (–Ω—É –µ–≥–æ –∏ –Ω–µ –±—ã–ª–æ)"}`
        );
        break;
      }

      case "–ø—Ä–∏–Ω—è—Ç—å-—É—á–∞—Å—Ç–∏–µ": {
        if (
          Date.now() -
            (this.container.tapkiTimestamps.get(
              `${interaction.user.id}.deletedAccount`
            ) || 0) <
          60 * 60 * 1000
        ) {
          await interaction.reply("> ‚õî  –ü–æ–¥–æ–∂–¥–∏ —Ö–æ—Ç—å —á–∞—Å-—Ç–æ");
          return;
        }
        await this.container.tapkiManager.touch(interaction.user.id);
        await interaction.reply("> :a:  –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
        break;
      }

      default: {
        await interaction.reply({
          content:
            ":warning: This subcommand is not yet implemented! " +
            `Report this to <@723971496107573328> if the problem lasts for a long time.`,
          ephemeral: true,
        });
      }
    }
  }

  public override registerApplicationCommands(
    registry: ApplicationCommandRegistry
  ): void {
    registry.registerChatInputCommand(
      new SlashCommandBuilder()
        .setName(this.name)
        .setDescription(this.description)
        .addSubcommand(
          new SlashCommandSubcommandBuilder()
            .setName("–ø—Ä–æ—Ñ–∏–ª—å")
            .setDescription("–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            .addUserOption(
              new SlashCommandUserOption()
                .setName("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                .setDescription("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Ñ–∏–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å")
            )
        )
        .addSubcommand(
          new SlashCommandSubcommandBuilder()
            .setName("–∫–∏–Ω—É—Ç—å")
            .setDescription("–ö–∏–Ω—É—Ç—å —Ç–∞–ø–∫–æ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            .addUserOption(
              new SlashCommandUserOption()
                .setName("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                .setDescription("–ê –∫–æ–≥–æ —É—Ö–ª–æ–ø–∞—Ç—å —Ç–∞–ø–∫–æ–º?")
                .setRequired(true)
            )
        )
        .addSubcommand(
          new SlashCommandSubcommandBuilder()
            .setName("–ø—Ä–∏–Ω—è—Ç—å-—É—á–∞—Å—Ç–∏–µ")
            .setDescription("–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ Tapki RPG")
        )
        .addSubcommand(
          new SlashCommandSubcommandBuilder()
            .setName("–≤—ã–π—Ç–∏")
            .setDescription("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Tapki RPG üò¢")
        )
        .toJSON() as any,
      {
        guildIds:
          process.env.NODE_ENV === "development"
            ? process.env.GUILD_IDS!.split(",")
            : [],
        behaviorWhenNotIdentical: RegisterBehavior.Overwrite,
      }
    );
  }
}
